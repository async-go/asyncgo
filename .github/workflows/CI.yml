name: CI
on: push
jobs:
  rspec:
    runs-on: ubuntu-latest
    container: ruby:3.1.0
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: asyncgo_test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        name: Cache bundler dependencies
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - name: Install node & yarn
        run:
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &&
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee
          /etc/apt/sources.list.d/yarn.list && apt update && apt install --yes
          --quiet nodejs yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install bundler dependencies
        run:
          bundle config set without 'development production' && bundle config
          set path 'vendor/bundle' && bundle install --jobs 4 --retry 3
      - name: Install node dependencies
        run: bin/yarn install
      - name: Run rspec
        run: bundle exec rspec --tag ~type:system
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres/asyncgo_test
  rspec-system:
    runs-on: ubuntu-latest
    container: ruby:3.1.0
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: asyncgo_test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        name: Cache bundler dependencies
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - name: Install node, yarn, & chromium
        run:
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &&
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee
          /etc/apt/sources.list.d/yarn.list && apt update && apt install --yes
          --quiet nodejs yarn chromium
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install bundler dependencies
        run:
          bundle config set without 'development production' && bundle config
          set path 'vendor/bundle' && bundle install --jobs 4 --retry 3
      - name: Install node dependencies
        run: bin/yarn install
      - name: Run rspec system specs
        run: bundle exec rspec --tag type:system
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres/asyncgo_test
  rubocop:
    runs-on: ubuntu-latest
    container: ruby:3.1.0
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        name: Cache bundler dependencies
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - name: Install bundler dependencies
        run:
          bundle config set without 'development production' && bundle config
          set path 'vendor/bundle' && bundle install --jobs 4 --retry 3
      - name: Run rubocop
        run: bundle exec rubocop
  haml-lint:
    runs-on: ubuntu-latest
    container: ruby:3.1.0
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        name: Cache bundler dependencies
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - name: Install bundler dependencies
        run:
          bundle config set without 'development production' && bundle config
          set path 'vendor/bundle' && bundle install --jobs 4 --retry 3
      - name: Run haml-lint
        run: bundle exec haml-lint
  standard:
    runs-on: ubuntu-latest
    container: node:current-buster
    steps:
      - uses: actions/checkout@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install node dependencies
        run: yarn install
      - name: Run standard
        run: yarn standard
  markdownlint:
    runs-on: ubuntu-latest
    container: node:current-buster
    steps:
      - uses: actions/checkout@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install node dependencies
        run: yarn install
      - name: Run markdownlint
        run: yarn markdownlint "*.md"
